name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          output_name="${{ github.event.repository.name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -v -ldflags="-s -w" -o "${output_name}" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ github.event.repository.name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f -exec mv {} release/ \;
          ls -lh release/

      - name: Extract release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Extract changelog for this version
          if [ -f CHANGELOG.md ]; then
            # Remove 'v' prefix for changelog lookup
            VERSION_NUM=${VERSION#v}

            # Extract the section for this version from CHANGELOG.md
            CHANGELOG_CONTENT=$(awk -v ver="$VERSION_NUM" '
              BEGIN { found=0; content="" }
              /^## \[/ {
                if (found) exit
                if ($0 ~ "\\[" ver "\\]") {
                  found=1
                  next
                }
              }
              found { content = content $0 "\n" }
              END { print content }
            ' CHANGELOG.md)

            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "Found changelog content for version $VERSION_NUM"
            else
              echo "No changelog content found for version $VERSION_NUM, using default"
              CHANGELOG_CONTENT="See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
            fi
          else
            echo "CHANGELOG.md not found"
            CHANGELOG_CONTENT="Release $VERSION"
          fi

          # Create release notes with changelog content
          cat << EOF > release_notes.md
          ## What's Changed

          ${CHANGELOG_CONTENT}

          ## Downloads

          Download the appropriate binary for your platform:

          - **Linux (amd64)**: \`gojq-mcp-linux-amd64\`
          - **Linux (arm64)**: \`gojq-mcp-linux-arm64\`
          - **macOS (Intel)**: \`gojq-mcp-darwin-amd64\`
          - **macOS (Apple Silicon)**: \`gojq-mcp-darwin-arm64\`
          - **Windows (amd64)**: \`gojq-mcp-windows-amd64.exe\`

          ## Installation

          1. Download the binary for your platform
          2. Make it executable: \`chmod +x gojq-mcp-*\` (Unix-like systems)
          3. Move to your PATH or use directly

          ## Usage

          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for usage instructions.
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
